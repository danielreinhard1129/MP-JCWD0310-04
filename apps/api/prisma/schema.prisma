// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int               @id @default(autoincrement())
  email                       String            @unique
  password                    String
  username                    String
  role                        Role              @default(CUSTOMER)
  referral                    String            @unique
  points                      Int               @default(0)
  pointsExpired               DateTime?
  Event                       Event[]
  // Order                       Order[]
  // Review                      Review[]
  // Voucher                     Voucher[]
  Reward                      Reward[]
  referralHistoriesAsReferrer ReferralHistory[] @relation("referralHistoriesAsReferrer")
  referralHistoriesAsReferred ReferralHistory[] @relation("referralHistoriesAsReferred")
  Review                      Review[]
  Voucher                     Voucher[]

  @@map("users")
}

model ReferralHistory {
  id         Int      @id @default(autoincrement())
  referrerId Int
  referredId Int
  createdAt  DateTime @default(now())
  referrer   User     @relation("referralHistoriesAsReferrer", fields: [referrerId], references: [id])
  user       User     @relation("referralHistoriesAsReferred", fields: [referredId], references: [id])

  @@map("referral_history")
}

// model Category {
//   id    Int     @id @default(autoincrement())
//   name  String  @unique
//   Event Event[]

//   @@map("categories")
// }

model Event {
  id             Int          @id @default(autoincrement())
  title          String       @unique
  description    String       @db.LongText
  venue          String
  thumbnail      String
  organizer      User         @relation(fields: [organizerId], references: [id])
  organizerId    Int
  location       Location     @relation(fields: [locationId], references: [id])
  locationId     Int
  availableSeats Int
  booked         Int
  startDate      DateTime
  endDate        DateTime
  isFree         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  category       String
  ticketTypes    TicketType[]
  // Order          Order[]
  voucher        Voucher[]
  review         Review[]

  @@map("events")
}

model TicketType {
  id      Int    @id @default(autoincrement())
  name    String
  limit   Int
  price   Int
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int
  // Order   Order[]

  @@map("ticket_types")
}

model Location {
  id    Int     @id @default(autoincrement())
  city  String
  event Event[]
  // Order   Order[]

  @@map("locations")
}

model Voucher {
  id          Int      @id @default(autoincrement())
  event       Event    @relation(fields: [eventId], references: [id])
  organizer   User     @relation(fields: [organizerId], references: [id])
  eventId     Int
  organizerId Int
  voucher     String
  price       Int
  limit       Int
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("vouchers")
}

model Reward {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  title      String
  percentage Int
  nominal    Int
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("rewards")
}

// model Order {
//   id           Int        @id @default(autoincrement())
//   buyer        User       @relation(fields: [buyerId], references: [id])
//   event        Event      @relation(fields: [eventId], references: [id])
//   ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
//   buyerId      Int
//   eventId      Int
//   ticketTypeId Int
//   totalAmount  Float
//   status       String
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @default(now())

//   @@map("orders")
// }

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  eventId   Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  @@map("reviews")
}

enum Role {
  CUSTOMER
  ORGANIZER
}
