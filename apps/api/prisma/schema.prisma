// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  username      String
  email         String        @unique
  password      String
  role          Role          @default(CUSTOMER)
  referral      String        @unique
  points        Int           @default(0)
  pointsExpired DateTime?
  // userReward    Boolean       @default(false)
  avatar        String?
  Event         Event[]
  Reward        Reward[]
  Review        Review[]
  Transaction   Transaction[]
  Coupon        Coupon[]

  @@map("users")
}

model Event {
  id             Int          @id @default(autoincrement())
  title          String       @unique
  description    String       @db.LongText
  category       String
  thumbnail      String
  location       String
  address        String?
  availableSeats Int
  startDate      DateTime
  endDate        DateTime
  isFree         Boolean      @default(false)
  price          Int
  booked         Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organizerId    Int
  organizer      User         @relation(fields: [organizerId], references: [id])
  Review         Review[]
  Transaction    Transaction?
  Coupon         Coupon[]

  @@map("events")
}

model Coupon {
  id             Int           @id @default(autoincrement())
  event          Event         @relation(fields: [eventId], references: [id])
  eventId        Int
  organizer      User          @relation(fields: [organizerId], references: [id])
  organizerId    Int
  code           String        @unique
  discountAmount Int
  expirationDate DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Transaction    Transaction[]

  @@map("coupons")
}

model Reward {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  title      String
  percentage Int
  nominal    Int
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("rewards")
}

model Transaction {
  id           Int               @id @default(autoincrement())
  status       TransactionStatus @default(PENDING)
  qty          Int
  total        Int
  userId       Int
  eventId      Int               @unique
  paymentProof String            @default("")
  couponId     Int?

  coupon            Coupon?            @relation(fields: [couponId], references: [id])
  event             Event              @relation(fields: [eventId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
  TransactionDetail TransactionDetail?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("transactions")
}

model TransactionDetail {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  transactionId Int      @unique

  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("transactionDetails")
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  eventId   Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  @@map("reviews")
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum TransactionStatus {
  PENDING
  COMPLETE
  ERROR
  CANCELLED
}
