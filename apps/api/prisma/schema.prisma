// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  username      String
  email         String        @unique
  password      String
  role          Role          @default(CUSTOMER)
  referral      String        @unique
  points        Int           @default(0)
  pointsExpired DateTime?
  // userReward    Boolean       @default(false)
  avatar        String?
  Event         Event[]
  Reward        Reward[]
  Review        Review[]
  Transaction   Transaction[]
  Coupon        Coupon[]
  UserCoupon    UserCoupon[]
  Voucher       Voucher[]
  UserVoucher   UserVoucher[]

  @@map("users")
}

model Event {
  id             Int           @id @default(autoincrement())
  title          String        @unique
  description    String        @db.LongText
  category       String
  thumbnail      String
  location       String
  address        String?
  availableSeats Int
  startDate      DateTime
  endDate        DateTime
  price          Int
  booked         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  organizerId    Int
  organizer      User          @relation(fields: [organizerId], references: [id])
  Review         Review[]
  Coupon         Coupon[]
  Transaction    Transaction[]

  @@map("events")
}

model Coupon {
  id             Int          @id @default(autoincrement())
  code           String       @unique
  expirationDate DateTime
  discountAmount Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  UserCoupon     UserCoupon[]
  Event          Event?       @relation(fields: [eventId], references: [id])
  eventId        Int?

  @@map("coupons")
}

model UserCoupon {
  id       Int     @id @default(autoincrement())
  userId   Int
  couponId Int
  isUse    Boolean

  user        User          @relation(fields: [userId], references: [id])
  coupon      Coupon        @relation(fields: [couponId], references: [id])
  Transaction Transaction[]

  @@map("userCoupons")
}

model Voucher {
  id             Int      @id @default(autoincrement())
  code           String
  discountAmount Int
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int

  user        User          @relation(fields: [userId], references: [id])
  UserVoucher UserVoucher[]

  @@map("vouchers")
}

model UserVoucher {
  id        Int     @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUse     Boolean

  user        User          @relation(fields: [userId], references: [id])
  voucher     Voucher       @relation(fields: [voucherId], references: [id])
  Transaction Transaction[]

  @@map("userVouchers")
}

model Reward {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  title      String
  percentage Int
  nominal    Int
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("rewards")
}

model Transaction {
  id            Int               @id @default(autoincrement())
  invoice       String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  status        TransactionStatus @default(PENDING)
  total         Int
  userId        Int
  eventId       Int
  paymentProof  String            @default("")
  userCouponId  Int?
  userVoucherId Int?
  qty           Int
  isPointUse    Boolean
  isUseCoupon   Boolean
  isUseVoucher  Boolean

  userCoupon  UserCoupon?  @relation(fields: [userCouponId], references: [id])
  event       Event        @relation(fields: [eventId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  userVoucher UserVoucher? @relation(fields: [userVoucherId], references: [id])

  @@map("transactions")
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  eventId   Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  @@map("reviews")
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum TransactionStatus {
  PENDING
  COMPLETE
  ERROR
  CANCELLED
}
